//是否将当前模块作为组件，如果是就作为单独的App，否则作为library
if (runAsComponent) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

def ext = rootProject.ext
def config = ext.config

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        // 配置路由参数
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        //是否将当前模块作为组件，如果是需要给一个appId
        if (runAsComponent) {
            applicationId ext.appId.module2
        }

        //配置BuildConfig代码中可以调用判断当前模块是否为组件
        buildConfigField("boolean", "runAsComponent", String.valueOf(runAsComponent))

        //配置资源文件
        sourceSets {
            main {
                //如果当前模块为组件则配置AndroidManifest和java代码主文件
                if (runAsComponent) {
                    manifest.srcFile 'src/component/AndroidManifest.xml'
                    java.srcDirs 'src/main/java','src/component/java'
                } else {
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }

        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation ext.androidX.appcompat
    implementation ext.androidX.constraintlayout

    implementation project(':router_annotation')
    implementation project(':router_core')
    annotationProcessor project(':router_processor')
}
